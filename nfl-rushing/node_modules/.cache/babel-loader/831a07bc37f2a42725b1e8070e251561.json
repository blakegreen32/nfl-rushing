{"ast":null,"code":"var _jsxFileName = \"/Users/blakegreen/nfl-rushing/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport NFLPlayers from './components/NFLPlayers';\nimport SearchBox from './components/SearchBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [nflPlayers, setNflPlayers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [playersPerPage, setPlayersPerPage] = useState(100);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const getNflPlayers = async () => {\n      const nflPlayersFromServer = await fetchNflPlayers();\n      setNflPlayers(nflPlayersFromServer);\n      setLoading(false);\n    };\n\n    getNflPlayers();\n  }, []); // Fetch Tasks\n\n  const fetchNflPlayers = async () => {\n    setLoading(true);\n    const res = await fetch('http://localhost:5000/nflPlayers');\n    const data = await res.json();\n    return data;\n  };\n\n  function filterNflPlayers(nflPlayers) {\n    return nflPlayers.filter(val => val.Player.toLowerCase().includes(searchTerm.toString().toLowerCase()));\n  }\n\n  function convertArrayToCSV(args) {\n    var result, ctr, keys, columnDelimiter, lineDelimiter, data;\n    data = args.data || null;\n\n    if (data == null || !data.length) {\n      return null;\n    }\n\n    columnDelimiter = args.columnDelimiter || ',';\n    lineDelimiter = args.lineDelimiter || '\\n';\n    keys = Object.keys(data[0]);\n    result = '';\n    result += keys.join(columnDelimiter);\n    result += lineDelimiter;\n    data.forEach(function (item) {\n      ctr = 0;\n      keys.forEach(function (key) {\n        if (ctr > 0) result += columnDelimiter;\n        result += item[key];\n        ctr++;\n      });\n      result += lineDelimiter;\n    });\n    return result;\n  }\n\n  function exportCsv(nflPlayers) {\n    var data, filename, link;\n    var csv = convertArrayToCSV({\n      data: nflPlayers\n    });\n    if (csv == null) return;\n    filename = nflPlayers.filename || 'nfl_players.csv';\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = 'data:text/csv;charset=utf-8,' + csv;\n    }\n\n    data = encodeURI(csv);\n    link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.click();\n  }\n\n  const indexOfLastPlayer = currentPage * playersPerPage;\n  const indexOfFirstPlayer = indexOfLastPlayer - playersPerPage;\n  const currentPlayers = nflPlayers.slice(indexOfFirstPlayer, indexOfLastPlayer);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NFL Player Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      placeholder: \"Search Players...\",\n      handleChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => exportCsv(filterNflPlayers(currentPlayers)),\n      children: \"Export CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), nflPlayers.length > 0 ? /*#__PURE__*/_jsxDEV(NFLPlayers, {\n      nflPlayers: filterNflPlayers(nflPlayers),\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyMargin\",\n      children: \"No NFL Players\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lNMgU4yaq+0yCtDDfPbYuO34Ntg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/blakegreen/nfl-rushing/src/App.js"],"names":["useState","useEffect","NFLPlayers","SearchBox","App","nflPlayers","setNflPlayers","searchTerm","setSearchTerm","currentPage","setCurrentPage","playersPerPage","setPlayersPerPage","loading","setLoading","getNflPlayers","nflPlayersFromServer","fetchNflPlayers","res","fetch","data","json","filterNflPlayers","filter","val","Player","toLowerCase","includes","toString","convertArrayToCSV","args","result","ctr","keys","columnDelimiter","lineDelimiter","length","Object","join","forEach","item","key","exportCsv","filename","link","csv","match","encodeURI","document","createElement","setAttribute","click","indexOfLastPlayer","indexOfFirstPlayer","currentPlayers","slice","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport NFLPlayers from './components/NFLPlayers'\nimport SearchBox from './components/SearchBox'\n\nconst App = () => {\n  const [nflPlayers, setNflPlayers] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [playersPerPage, setPlayersPerPage] = useState(100)\n  const [loading, setLoading] = useState(false)\n\n\n  useEffect(() => {\n    const getNflPlayers = async () => {\n      const nflPlayersFromServer = await fetchNflPlayers()\n      setNflPlayers(nflPlayersFromServer)\n      setLoading(false)\n    }\n\n    getNflPlayers() \n  }, [])\n\n  // Fetch Tasks\n  const fetchNflPlayers = async () => {\n    setLoading(true)\n    const res = await fetch('http://localhost:5000/nflPlayers')\n    const data = await res.json()\n    return data \n  }\n\n  function filterNflPlayers(nflPlayers) {\n    return nflPlayers.filter((val) => val.Player.toLowerCase().includes(searchTerm.toString().toLowerCase()))\n  }\n\n  function convertArrayToCSV( args ) {\n    var result, ctr, keys, columnDelimiter, lineDelimiter, data;\n    data = args.data || null;\n    if ( data == null || ! data.length ) {\n      return null;\n    }\n\n    columnDelimiter = args.columnDelimiter || ',';\n    lineDelimiter = args.lineDelimiter || '\\n';\n\n    keys = Object.keys(data[0]);\n    result = '';\n    result += keys.join(columnDelimiter);\n    result += lineDelimiter;\n\n    data.forEach(function(item) {\n      ctr = 0;\n      keys.forEach(function(key) {\n        if (ctr > 0) result += columnDelimiter;\n        result += item[key];\n        ctr++;\n      });\n      result += lineDelimiter;\n    });\n\n    return result;\n  }\n\n  function exportCsv(nflPlayers) {\n    var data, filename, link;\n    var csv = convertArrayToCSV({\n      data: nflPlayers\n    });\n\n    if (csv == null) return;\n    filename = nflPlayers.filename || 'nfl_players.csv';\n\n    if ( !csv.match(/^data:text\\/csv/i )) {\n      csv = 'data:text/csv;charset=utf-8,' + csv;\n    }\n    data = encodeURI(csv);\n\n    link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.click();\n  }\n\n  const indexOfLastPlayer = currentPage * playersPerPage;\n  const indexOfFirstPlayer = indexOfLastPlayer - playersPerPage;\n  const currentPlayers = nflPlayers.slice(indexOfFirstPlayer, indexOfLastPlayer);\n\n  return (\n    <div className='container'>\n      <h1>NFL Player Statistics</h1>\n      <SearchBox placeholder=\"Search Players...\" handleChange={(e) => setSearchTerm(e.target.value)} />\n      <button onClick= {() => exportCsv(filterNflPlayers(currentPlayers))}>Export CSV</button>\n      {nflPlayers.length > 0 ? (\n        <NFLPlayers nflPlayers={filterNflPlayers(nflPlayers)} loading={loading}/>\n      ):<div className=\"emptyMargin\">No NFL Players</div>}\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}